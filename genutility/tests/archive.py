from io import BytesIO

from genutility.archive import iter_zip
from genutility.test import MyTestCase, parametrize

ZIP_EMPTY = b"PK\x05\x06\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
ZIP_ONE_FILE = b"PK\x03\x04\x14\x00\x00\x00\x00\x00\x0f\x84\x01[c\xf3\xf3\xad\x04\x00\x00\x00\x04\x00\x00\x00\x0c\x00\x00\x00filename.txtdataPK\x01\x02\x14\x00\x14\x00\x00\x00\x00\x00\x0f\x84\x01[c\xf3\xf3\xad\x04\x00\x00\x00\x04\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x01\x00\x00\x00\x00filename.txtPK\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00:\x00\x00\x00.\x00\x00\x00\x00\x00"


class ArchiveTest(MyTestCase):
    @parametrize(
        (ZIP_EMPTY, []),
        (ZIP_ONE_FILE, [("filename.txt", b"data")]),
    )
    def test_iter_zip(self, zipdata, truth):
        result = [(name, fp.read()) for name, fp in iter_zip(BytesIO(zipdata), "rb")]
        self.assertEqual(truth, result)


if __name__ == "__main__":
    import unittest

    unittest.main()
